AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete Environment Infrastructure: VPC + Cloud Map Namespace + ECS Cluster'

Parameters:
  Env:
    Type: String
    Default: dev
    Description: Environment name tag

  WebServerPort:
    Type: Number
    Default: 8080
    Description: 'Web server port'

  RpcServerPort:
    Type: Number
    Default: 8081
    Description: 'RPC server port'

  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'VPC CIDR block'

  PublicSubnetCidr1:
    Type: String
    Default: '10.0.1.0/24'
    Description: 'Public subnet 1 CIDR block'

  PublicSubnetCidr2:
    Type: String
    Default: '10.0.2.0/24'
    Description: 'Public subnet 2 CIDR block'

  PrivateSubnetCidr1:
    Type: String
    Default: '10.0.11.0/24'
    Description: 'Private subnet 1 CIDR block'

  PrivateSubnetCidr2:
    Type: String
    Default: '10.0.12.0/24'
    Description: 'Private subnet 2 CIDR block'

Resources:
  # ===================== VPC =====================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - { Key: Name, Value: !Sub '${Env}-vpc' }
        - { Key: Environment, Value: !Ref Env }

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - { Key: Name, Value: !Sub '${Env}-igw' }
        - { Key: Environment, Value: !Ref Env }

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # ===================== SUBNETS =====================
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCidr1
      MapPublicIpOnLaunch: true
      Tags:
        - { Key: Name, Value: !Sub '${Env}-public-1' }
        - { Key: Environment, Value: !Ref Env }
        - { Key: Type, Value: Public }

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCidr2
      MapPublicIpOnLaunch: true
      Tags:
        - { Key: Name, Value: !Sub '${Env}-public-2' }
        - { Key: Environment, Value: !Ref Env }
        - { Key: Type, Value: Public }

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetCidr1
      Tags:
        - { Key: Name, Value: !Sub '${Env}-private-1' }
        - { Key: Environment, Value: !Ref Env }
        - { Key: Type, Value: Private }

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetCidr2
      Tags:
        - { Key: Name, Value: !Sub '${Env}-private-2' }
        - { Key: Environment, Value: !Ref Env }
        - { Key: Type, Value: Private }

  # ===================== ROUTE TABLES =====================
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub '${Env}-public-rt' }
        - { Key: Environment, Value: !Ref Env }

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub '${Env}-private-rt-1' }
        - { Key: Environment, Value: !Ref Env }

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub '${Env}-private-rt-2' }
        - { Key: Environment, Value: !Ref Env }

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # ===================== NAT GATEWAY =====================
  NatEip1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - { Key: Name, Value: !Sub '${Env}-nat-eip-1' }
        - { Key: Environment, Value: !Ref Env }

  NatEip2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - { Key: Name, Value: !Sub '${Env}-nat-eip-2' }
        - { Key: Environment, Value: !Ref Env }

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatEip1.AllocationId
      Tags:
        - { Key: Name, Value: !Sub '${Env}-natgw-1' }
        - { Key: Environment, Value: !Ref Env }

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt NatEip2.AllocationId
      Tags:
        - { Key: Name, Value: !Sub '${Env}-natgw-2' }
        - { Key: Environment, Value: !Ref Env }

  PrivateDefaultRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateDefaultRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  # ===================== CLOUD MAP NAMESPACE =====================
  PrivateDnsNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub '${Env}.local'
      Vpc: !Ref VPC
      Description: !Sub 'Private DNS namespace for ${Env} environment'
      Tags:
        - Key: Name
          Value: !Sub '${Env}-namespace'
        - Key: Environment
          Value: !Ref Env

  # ===================== ECS CLUSTER =====================
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${Env}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub '${Env}-cluster'
        - Key: Environment
          Value: !Ref Env

  # ===================== SHARED SECURITY GROUPS =====================
  SharedAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Shared ALB SG for ${Env}'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0  # 显式放行到后端
      Tags:
        - Key: Name
          Value: !Sub 'sg-alb-${Env}'
        - Key: Environment
          Value: !Ref Env

  SharedEcsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Shared ECS Service SG for ${Env}'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref WebServerPort
          ToPort: !Ref WebServerPort
          SourceSecurityGroupId: !Ref SharedAlbSecurityGroup   # 只允许来自 ALB
        - IpProtocol: tcp
          FromPort: !Ref RpcServerPort
          ToPort: !Ref RpcServerPort
          SourceSecurityGroupId: !Ref SharedEcsServiceSecurityGroup   # 允许 ECS 内部 gRPC 通信
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'sg-ecs-${Env}'
        - Key: Environment
          Value: !Ref Env

Outputs:
  # VPC Outputs
  VpcId:
    Description: 'VPC ID'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'

  PublicSubnets:
    Description: 'Public subnet IDs'
    Value: !Join [ ',', [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnets'

  PrivateSubnets:
    Description: 'Private subnet IDs'
    Value: !Join [ ',', [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnets'

  InternetGatewayId:
    Description: 'Internet Gateway ID'
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-InternetGatewayId'

  # Cloud Map Outputs
  NamespaceId:
    Description: 'Cloud Map Namespace ID'
    Value: !Ref PrivateDnsNamespace
    Export:
      Name: !Sub '${AWS::StackName}-namespace-id'

  NamespaceName:
    Description: 'Cloud Map Namespace Name'
    Value: !Sub '${Env}.local'
    Export:
      Name: !Sub '${AWS::StackName}-namespace-name'

  # ECS Cluster Outputs
  ClusterName:
    Description: 'ECS Cluster Name'
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  ClusterArn:
    Description: 'ECS Cluster ARN'
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterArn'

  # Security Group Outputs
  SharedAlbSecurityGroupId:
    Description: 'Shared ALB Security Group ID'
    Value: !Ref SharedAlbSecurityGroup
    Export:
      Name: !Sub 'sg-alb-${Env}-id'

  SharedEcsServiceSecurityGroupId:
    Description: 'Shared ECS Service Security Group ID'
    Value: !Ref SharedEcsServiceSecurityGroup
    Export:
      Name: !Sub 'sg-ecs-${Env}-id'
