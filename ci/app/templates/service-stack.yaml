AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Service + TaskDefinition (SRV registration via existing Cloud Map Namespace)'

Parameters:
  # ================= Basic Parameters =================
  ServiceName:
    Type: String
    Description: 'Service name (e.g. demo-rpc or web-api)'

  Lane:
    Type: String
    Default: 'default'
    Description: 'Deployment lane name (passed from pipeline variable)'

  ImageUri:
    Type: String
    Description: 'Container image URI (generated by buildspec.yaml)'

  DesiredCount:
    Type: Number
    Default: 1
    Description: 'Desired ECS service instance count'

  # ================= Resource Specification =================
  Cpu:
    Type: String
    Default: '512'
    Description: 'vCPU units (1024 = 1 vCPU)'

  Memory:
    Type: String
    Default: '1024'
    Description: 'Memory in MB'

  # ================= Application Configuration =================
  Env:
    Type: String
    Default: 'default'
    AllowedValues: [ default, dev, test, preonline, online ]
    Description: 'Application environment (allowed: default, dev, test, preonline, online)'

  SupportWeb:
    Type: String
    Default: 'true'
    AllowedValues: [ 'true', 'false' ]
    Description: 'Whether service supports Web interface (use ALB)'

  SupportRpc:
    Type: String
    Default: 'false'
    AllowedValues: [ 'true', 'false' ]
    Description: 'Whether service supports RPC interface (use Cloud Map)'

  WebServerPort:
    Type: Number
    Default: 8080
    Description: 'Web server port'

  RpcServerPort:
    Type: Number
    Default: 8081
    Description: 'RPC server port (registered to Cloud Map SRV record)'

  HealthCheckGracePeriodSeconds:
    Type: Number
    Default: 120
    Description: 'Health check grace period in seconds (time to wait before starting health checks)'

Conditions:
  IsDefaultLane: !Or
    - !Equals [!Ref Lane, 'default']
    - !Equals [!Ref Lane, '']
  NotDefaultLane: !Not
    - !Condition IsDefaultLane
  IsWebService: !Equals [!Ref SupportWeb, 'true']
  IsRpcService: !Equals [!Ref SupportRpc, 'true']
  IsWebServiceAndNotDefaultLane: !And
    - !Condition IsWebService
    - !Condition NotDefaultLane

Resources:
  LaneTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: IsWebServiceAndNotDefaultLane
    Properties:
      Name: !Sub '${ServiceName}-${Env}-${Lane}-tg'
      VpcId:
        Fn::ImportValue:
          Fn::Sub: 'infra-environment-${Env}-VpcId'
      TargetType: ip
      Protocol: HTTP
      Port: !Ref WebServerPort
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  LaneListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: IsWebServiceAndNotDefaultLane
    Properties:
      ListenerArn:
        Fn::ImportValue:
          Fn::Sub: 'boot-${ServiceName}-${Env}-HttpListenerArn'
      Priority: 100
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: 'tracestate'
            Values:
              - !Sub 'ctx=lane:${Lane}'
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LaneTargetGroup

  TaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ServiceName}-${Lane}-${Env}-task'
      RequiresCompatibilities: [ FARGATE ]
      NetworkMode: awsvpc
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      ExecutionRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole'
      TaskRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ecsTaskRole'
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref ImageUri
          Essential: true
          PortMappings:
            - Name: !Sub '${ServiceName}-${WebServerPort}-tcp'
              ContainerPort: !Ref WebServerPort
              Protocol: tcp
              AppProtocol: http
            - Name: !Sub '${ServiceName}-${RpcServerPort}-tcp'
              ContainerPort: !Ref RpcServerPort
              Protocol: tcp
              AppProtocol: grpc
          Environment:
            - Name: APP_ENV
              Value: !Ref Env
            - Name: LANE
              Value: !Ref Lane
            - Name: SPRING_PROFILES_ACTIVE
              Value: !Ref Env
            - Name: WEB_SERVER_PORT
              Value: !Ref WebServerPort
            - Name: RPC_SERVER_PORT
              Value: !Ref RpcServerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue:
                  Fn::Sub: 'boot-${ServiceName}-${Env}-LogGroupName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !If
                - IsDefaultLane
                - 'default'
                - !Ref Lane

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !If
        - IsDefaultLane
        - !Sub '${ServiceName}-${Env}'
        - !Sub '${ServiceName}-${Env}-${Lane}'
      Cluster:
        Fn::ImportValue:
          Fn::Sub: 'infra-environment-${Env}-ClusterName'
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriodSeconds
      TaskDefinition: !Ref TaskDef
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split [ ",", { "Fn::ImportValue": { "Fn::Sub": "infra-environment-${Env}-PrivateSubnets" } } ]
          AssignPublicIp: ENABLED
      ServiceRegistries:
        - RegistryArn:
            Fn::ImportValue:
              Fn::Sub: 'boot-${ServiceName}-${Env}-${ServiceName}-service-arn'
          ContainerName: !Ref ServiceName
          ContainerPort: !Ref RpcServerPort
      EnableECSManagedTags: true
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      DeploymentController:
        Type: ECS
      Tags: !If
        - IsDefaultLane
        - !Ref 'AWS::NoValue'
        - - Key: Lane
            Value: !Ref Lane
      LoadBalancers: !If
        - IsWebService
        - !If
          - IsDefaultLane
          - - TargetGroupArn:
                Fn::ImportValue:
                  Fn::Sub: 'boot-${ServiceName}-${Env}-DefaultTargetGroupArn'
              ContainerName: !Ref ServiceName
              ContainerPort: !Ref WebServerPort
          - - TargetGroupArn: !Ref LaneTargetGroup
              ContainerName: !Ref ServiceName
              ContainerPort: !Ref WebServerPort
        - !Ref 'AWS::NoValue'

Outputs:
  ServiceArn:
    Description: 'ECS Service ARN'
    Value: !Ref Service
  TaskDefinitionArn:
    Description: 'ECS TaskDefinition ARN'
    Value: !Ref TaskDef
  DiscoveryServiceArn:
    Description: 'Cloud Map Service ARN'
    Value:
      Fn::ImportValue:
        Fn::Sub: 'boot-${ServiceName}-${Env}-${ServiceName}-service-arn'