AWSTemplateFormatVersion: '2010-09-09'
Description: 'Service Bootstrap Stack: ALB + LogGroup + Cloud Map Service (shared infrastructure)'

Parameters:
  ServiceName:
    Type: String
    Description: 'Service name (e.g. user-service)'

  Env:
    Type: String
    Default: 'dev'
    Description: 'Environment name'

  # ALB Parameters
  HealthCheckPort:
    Type: Number
    Default: 80
    Description: 'Target group health check port'

  HealthCheckPath:
    Type: String
    Default: '/'
    Description: 'Target group health check path'

  # Log Parameters
  LogRetentionDays:
    Type: Number
    Default: 30
    Description: 'Log retention period in days'

  # Service Discovery Parameters
  DnsRecordType:
    Type: String
    Description: 'DNS record type for service discovery'
    Default: 'SRV'
    AllowedValues: ['SRV', 'A', 'AAAA']

  DnsTtl:
    Type: Number
    Description: 'DNS TTL in seconds'
    Default: 30
    MinValue: 5
    MaxValue: 300

  HealthCheckFailureThreshold:
    Type: Number
    Description: 'Health check failure threshold'
    Default: 1
    MinValue: 1
    MaxValue: 10

Conditions:
  ShouldCreateResources: !Not [!Equals [!Ref ServiceName, '-']]

Resources:

  # ===================== APPLICATION LOAD BALANCER =====================
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: ShouldCreateResources
    Properties:
      Name: !Sub '${ServiceName}-${Env}-alb'
      Scheme: internet-facing
      Type: application
      Subnets: !Split [ ',', { "Fn::ImportValue": { "Fn::Sub": "infra-environment-${Env}-PublicSubnets" } } ]
      SecurityGroups:
        - Fn::ImportValue:
            Fn::Sub: '${Env}-alb-sg-id'

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: ShouldCreateResources
    Properties:
      Name: !Sub '${ServiceName}-${Env}-default-tg'
      VpcId:
        Fn::ImportValue:
          Fn::Sub: 'infra-environment-${Env}-VpcId'
      TargetType: ip
      Protocol: HTTP
      Port: !Ref HealthCheckPort
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: ShouldCreateResources
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  # ===================== CLOUDWATCH LOG GROUP =====================
  LogGroup:
    Type: AWS::Logs::LogGroup
    Condition: ShouldCreateResources
    Properties:
      LogGroupName: !Sub '/ecs/${Env}/${ServiceName}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub '/ecs/${Env}/${ServiceName}'
        - Key: Environment
          Value: !Ref Env
        - Key: Service
          Value: !Ref ServiceName

  # ===================== CLOUD MAP SERVICE =====================
  ServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Condition: ShouldCreateResources
    Properties:
      Name: !Ref ServiceName
      NamespaceId:
        Fn::ImportValue:
          Fn::Sub: 'infra-environment-${Env}-namespace-id'
      Description: !Sub 'Cloud Map Service for ${ServiceName}'
      DnsConfig:
        DnsRecords:
          - Type: !Ref DnsRecordType
            TTL: !Ref DnsTtl
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: !Ref HealthCheckFailureThreshold
      Tags:
        - Key: Name
          Value: !Ref ServiceName
        - Key: Service
          Value: !Ref ServiceName
        - Key: Environment
          Value: !Ref Env

Outputs:
  # ALB Outputs
  HttpListenerArn:
    Condition: ShouldCreateResources
    Description: 'HTTP Listener ARN'
    Value: !Ref HttpListener
    Export:
      Name: !Sub '${AWS::StackName}-HttpListenerArn'

  DefaultTargetGroupArn:
    Condition: ShouldCreateResources
    Description: 'Default Target Group ARN'
    Value: !Ref DefaultTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-DefaultTargetGroupArn'

  # LogGroup Outputs
  LogGroupName:
    Condition: ShouldCreateResources
    Description: 'CloudWatch Log Group Name'
    Value: !Sub '/ecs/${Env}/${ServiceName}'
    Export:
      Name: !Sub '${AWS::StackName}-LogGroupName'

  # Service Discovery Outputs
  ServiceArn:
    Condition: ShouldCreateResources
    Description: 'Service Discovery Service ARN'
    Value: !GetAtt ServiceDiscoveryService.Arn
    Export:
      Name: !Sub '${AWS::StackName}-sd-service-arn'

